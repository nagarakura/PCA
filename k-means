import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
from copy import deepcopy
import random as rd
k=3
[17]: data=pd.DataFrame({"X1":[5.9, 4.6, 6.2, 4.7, 5.5, 5. , 4.9, 6.7, 5.1, 6.],"X2":
â†ª[3.2, 2.9, 2.8, 3.2, 4.2, 3. , 3.1, 3.1, 3.8, 3. ]})
print(data["X1"])
0 5.9
1 4.6
2 6.2
3 4.7
4 5.5
7
5 5.0
6 4.9
7 6.7
8 5.1
9 6.0
Name: X1, dtype: float64
[19]: X=np.array(list(zip(data["X1"],data["X2"])))
X
[19]: array([[5.9, 3.2],
[4.6, 2.9],
[6.2, 2.8],
[4.7, 3.2],
[5.5, 4.2],
[5. , 3. ],
[4.9, 3.1],
[6.7, 3.1],
[5.1, 3.8],
[6. , 3. ]])
[22]: cent=np.array(list(zip([6.2, 6.6 ,6.5],[3.2, 3.7, 3.0])))
cent_old=np.zeros(cent.shape)
clusters=np.zeros(len(X))
print(clusters,cent,cent_old)
[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.] [[6.2 3.2]
[6.6 3.7]
[6.5 3. ]] [[0. 0.]
[0. 0.]
[0. 0.]]
[20]: def eucl(a,b,ax=1):
return np.linalg.norm(a-b,axis=ax)
error=eucl(cent,cent_old,None)
iterr=0
[24]: while error != 0:
iterr = iterr + 1
for i in range(len(X)):
distances = eucl(X[i], cent)
cluster = np.argmin(distances)
clusters[i] = cluster
cent_old = deepcopy(cent)
print("Old Centroid")
8
print(cent)
# Finding the new centroids by taking the Mean
for p in range(k):
points = [X[j] for j in range(len(X)) if clusters[j] == p]
cent[p] = np.mean(points, axis=0)
print(" New Centroids after ", iterr," Iteration \n", cent)
error = eucl(cent, cent_old, None)
print("Error ... ",error)
print("Data points belong to which cluster")
print(clusters)
print("********************************************************")


-----------
or
-------------
import numpy as np
import pandas as pd
from copy import deepcopy
k=3
import random as rd
import matplotlib.pyplot as plt

X = pd.read_csv('kmeans.csv')
print(X)

X = X[["X1","X2"]]
#Visualise data points
plt.scatter(X["X1"],X["X2"],c='red')
plt.xlabel('AnnualIncome')
plt.ylabel('Loan Amount (In Thousands)')
plt.show()

x1 = X['X1'].values
x2 = X['X2'].values

x1
x2

X = np.array(list(zip(x1, x2)))
print(X)

C_x = [6.2, 6.6 ,6.5]
C_y = [3.2, 3.7, 3.0]

Centroid = np.array(list(zip(C_x, C_y)), dtype=np.float32)
print("Initial Centroids")
print(Centroid.shape)

Centroid

type(Centroid)

Centroid_old = np.zeros(Centroid.shape)
print(Centroid_old)

clusters = np.zeros(len(X))
print(clusters)

def euclidean(a,b, ax=1):
    return np.linalg.norm(a-b, axis=ax)

error = euclidean(Centroid, Centroid_old,None)
print(error)

iterr = 0

while error != 0:
        # Assigning each value to its closest cluster
        iterr = iterr + 1
        for i in range(len(X)):
            distances = euclidean(X[i], Centroid)
            cluster = np.argmin(distances)
            clusters[i] = cluster
        Centroid_old = deepcopy(Centroid)
        print("Old Centroid")
        print(Centroid_old)
            
        
        # Finding the new centroids by taking the Mean
        for p in range(k):
            points = [X[j] for j in range(len(X)) if clusters[j] == p]
            Centroid[p] = np.mean(points, axis=0)
        print(" New Centroids after ", iterr," Iteration \n", Centroid)
        error = euclidean(Centroid, Centroid_old, None)
        print("Error  ... ",error)
        print("Data points belong to which cluster")
        print(clusters)
        print("********************************************************")



X = pd.read_csv('kmeans.csv')
X = X[["X1","X2"]]
#Visualise data points
plt.scatter(X["X1"],X["X2"],c=clusters)
plt.xlabel('AnnualIncome')
plt.ylabel('Loan Amount (In Thousands)')
plt.show()

